// Code generated by MockGen. DO NOT EDIT.
// Source: internal/delivery/tinyURL.go

// Package mock_delivery is a generated GoMock package.
package mock_delivery

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUsecase is a mock of IUsecase interface.
type MockIUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseMockRecorder
}

// MockIUsecaseMockRecorder is the mock recorder for MockIUsecase.
type MockIUsecaseMockRecorder struct {
	mock *MockIUsecase
}

// NewMockIUsecase creates a new mock instance.
func NewMockIUsecase(ctrl *gomock.Controller) *MockIUsecase {
	mock := &MockIUsecase{ctrl: ctrl}
	mock.recorder = &MockIUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecase) EXPECT() *MockIUsecaseMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIUsecase) Add(fullUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", fullUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockIUsecaseMockRecorder) Add(fullUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIUsecase)(nil).Add), fullUrl)
}

// Get mocks base method.
func (m *MockIUsecase) Get(tinyUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tinyUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIUsecaseMockRecorder) Get(tinyUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIUsecase)(nil).Get), tinyUrl)
}
